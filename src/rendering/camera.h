#ifndef CAMERA_H
#define CAMERA_H

/*-----------------------------------------------------------------------------------------------------------------------*/
/* --  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */
/* Camera.h																												 */
/* --  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */
/*-----------------------------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------*/
/* Includes																						   */
/*-------------------------------------------------------------------------------------------------*/
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/quaternion.hpp>

namespace VkExample
{
	/*-------------------------------------------------------------------------*/
	/* Camera																   */
	/*-------------------------------------------------------------------------*/
	class Camera
	{
	private:
		/*-------------------------------------------------------------------*/
		/* Position, Rotation, & Zoom										 */
		/*-------------------------------------------------------------------*/
		glm::vec3						position;
		glm::quat						rotation;
		float							zoom;

		/*-------------------------------------------------------------------*/
		/* Nearclip & Farclip												 */
		/*-------------------------------------------------------------------*/
		float							nearClip;
		float							farClip;

		/*-------------------------------------------------------------------*/
		/* Projection & View												 */
		/*-------------------------------------------------------------------*/
		glm::mat4						projection;
		glm::mat4						view;

		/*-------------------------------------------------------------------*/
		/* Viewport & Scissor												 */
		/*-------------------------------------------------------------------*/
		VkViewport						viewport;
		VkRect2D						scissor;

	public:
		/*-------------------------------------------------------------------*/
		/* View & Projection Functions										 */
		/*-------------------------------------------------------------------*/
		void							UpdateProjection();
		void							UpdateView();

		glm::mat4						GetViewProjection() { return projection * view; }

		/*-------------------------------------------------------------------*/
		/* Viewport & Scissor Functions										 */
		/*-------------------------------------------------------------------*/
		VkViewport						GetViewport() { return viewport; }
		VkRect2D						GetScissor() { return scissor; };

		void							SetViewportWidth(float width) { viewport.width = width; }
		void							SetViewportHeight(float height) { viewport.height = height; }

		void							SetScissorOffset(VkOffset2D o) { scissor.offset = o; }
		void							SetScissorExtent(VkExtent2D e) { scissor.extent = e; }

		/*-------------------------------------------------------------------*/
		/* Constructor														 */
		/*-------------------------------------------------------------------*/
		Camera(glm::vec3 position, glm::quat rotation, float zoom, float nearClip, float farClip);
	};
}

#endif