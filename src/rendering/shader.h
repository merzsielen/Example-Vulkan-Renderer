#ifndef SHADER_H
#define SHADER_H

/*-----------------------------------------------------------------------------------------------------------------------*/
/* --  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */
/* Shader.h																												 */
/* --  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */
/*-----------------------------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------*/
/* Includes																						   */
/*-------------------------------------------------------------------------------------------------*/
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>
#include <fstream>
#include <sstream>
#include <iostream>
#include <string>
#include <vector>

namespace VkExample
{
	/*---------------------------------------------------------------------------------------------*/
	/* Utility Functions																		   */
	/*---------------------------------------------------------------------------------------------*/
	std::vector<char> ReadCode(const char* path);
	VkShaderModule CreateShaderModule(VkDevice device, std::string code);

	/*---------------------------------------------------------------------------------------------*/
	/* Shader																					   */
	/*---------------------------------------------------------------------------------------------*/
	class Shader
	{
	private:
		/*-------------------------------------------------------------------*/
		/* Stages															 */
		/*-------------------------------------------------------------------*/
		std::vector<VkPipelineShaderStageCreateInfo>	stages;

		/*-------------------------------------------------------------------*/
		/* Modules															 */
		/*-------------------------------------------------------------------*/
		std::vector<VkShaderModule>						modules;

	public:
		/*-------------------------------------------------------------------*/
		/* Get Shader Stages												 */
		/*-------------------------------------------------------------------*/
		std::vector<VkPipelineShaderStageCreateInfo>	GetStages() { return stages; }

		/*-------------------------------------------------------------------*/
		/* Destroy Modules													 */
		/*-------------------------------------------------------------------*/
		void											DestroyModules(VkDevice device);

		/*-------------------------------------------------------------------*/
		/* Constructors														 */
		/*-------------------------------------------------------------------*/
		Shader();
		Shader(VkDevice device, std::string vertexPath, std::string fragmentPath);
	};
}

#endif